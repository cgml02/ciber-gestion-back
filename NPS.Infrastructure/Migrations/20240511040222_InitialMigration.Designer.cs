// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NPS.Infrastructure.Data;

#nullable disable

namespace NPS.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240511040222_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("NPS.Domain.Entities.CompanyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cibergestión"
                        });
                });

            modelBuilder.Entity("NPS.Domain.Entities.ProfileEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Profiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Administrador del sitio",
                            Name = "Administrador"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Votante en el cuestionario",
                            Name = "Votante"
                        });
                });

            modelBuilder.Entity("NPS.Domain.Entities.QuestionnaireEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("companyId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("question");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Questionnaires");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "NPS",
                            Question = "¿Cuán probable es que recomiende el producto o servicio a un familiar o amigo? Para ello se les pide calificar en una escala de 0 a 10, donde 0 es «Muy improbable» y 10 es «Definitivamente lo recomendaría»"
                        });
                });

            modelBuilder.Entity("NPS.Domain.Entities.RuleQuestionnaireEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Classification")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("classification");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdDate");

                    b.Property<int>("QuestionnaireId")
                        .HasColumnType("int")
                        .HasColumnName("questionnaireId");

                    b.Property<int>("ScoreEnd")
                        .HasColumnType("int")
                        .HasColumnName("scoreEnd");

                    b.Property<int>("ScoreStart")
                        .HasColumnType("int")
                        .HasColumnName("scoreStart");

                    b.HasKey("Id");

                    b.HasIndex("QuestionnaireId");

                    b.ToTable("RulesQuestionnaire");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Classification = "Detractores",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestionnaireId = 1,
                            ScoreEnd = 6,
                            ScoreStart = 0
                        },
                        new
                        {
                            Id = 2,
                            Classification = "Neutros",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestionnaireId = 1,
                            ScoreEnd = 8,
                            ScoreStart = 7
                        },
                        new
                        {
                            Id = 3,
                            Classification = "Promotores",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestionnaireId = 1,
                            ScoreEnd = 10,
                            ScoreStart = 9
                        });
                });

            modelBuilder.Entity("NPS.Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("firstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("lastName");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("password");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("profileId");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e62021e7-3e99-423b-a367-232a1483b11f"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "cgml02@hotmail.com",
                            FirstName = "Carlos",
                            LastName = "Medina",
                            Password = "uH/y/Lr+GZjtUuJuhg1os6THungwxmTxYnLasuzhxq9obhaC",
                            ProfileId = 1
                        },
                        new
                        {
                            Id = new Guid("9cd0a824-21f4-4a48-b06a-76439283d707"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "test@hotmail.com",
                            FirstName = "Votante",
                            LastName = "Prueba",
                            Password = "3AseC+IKT6jv9tj2OauK6I+M3OvzJOK2JGGk5ajBvBlrNkXk",
                            ProfileId = 2
                        });
                });

            modelBuilder.Entity("NPS.Domain.Entities.UserQuestionnaireEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdDate");

                    b.Property<int>("QuestionnaireId")
                        .HasColumnType("int")
                        .HasColumnName("questionnaireId");

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasColumnName("score");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionnaireId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersQuestionnaires");
                });

            modelBuilder.Entity("NPS.Domain.Entities.QuestionnaireEntity", b =>
                {
                    b.HasOne("NPS.Domain.Entities.CompanyEntity", "Company")
                        .WithMany("Questionnaires")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("NPS.Domain.Entities.RuleQuestionnaireEntity", b =>
                {
                    b.HasOne("NPS.Domain.Entities.QuestionnaireEntity", "Questionnaire")
                        .WithMany("RuleQuestionnaires")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("NPS.Domain.Entities.UserEntity", b =>
                {
                    b.HasOne("NPS.Domain.Entities.ProfileEntity", "Profile")
                        .WithMany("Users")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("NPS.Domain.Entities.UserQuestionnaireEntity", b =>
                {
                    b.HasOne("NPS.Domain.Entities.QuestionnaireEntity", "Questionnaire")
                        .WithMany("UserQuestionnaires")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NPS.Domain.Entities.UserEntity", "User")
                        .WithMany("UserQuestionnaires")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Questionnaire");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NPS.Domain.Entities.CompanyEntity", b =>
                {
                    b.Navigation("Questionnaires");
                });

            modelBuilder.Entity("NPS.Domain.Entities.ProfileEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("NPS.Domain.Entities.QuestionnaireEntity", b =>
                {
                    b.Navigation("RuleQuestionnaires");

                    b.Navigation("UserQuestionnaires");
                });

            modelBuilder.Entity("NPS.Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("UserQuestionnaires");
                });
#pragma warning restore 612, 618
        }
    }
}
